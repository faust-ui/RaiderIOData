当前进度：

2022年5月9日：
	已完成：
		1， 输入角色信息页面，并跳转已完成；
		2， 每次调用爬虫，删除数据库内与角色相关的所有记录，完成；
		3， test.py 利用ajax请求切换图片，测试完成；

	待完成功能：
		1，main.html 左上角色信息栏实时切换：
			已完成.3代码已经实现，需要复制到主程序上；
		2，每天0点清空数据库：
			实现方法：新的python.app，character_id != 0 ==> 清除该行数据；每天0点调用一次该app(生产模式部署教程有方法)；
		3，跳转到main.html时，页面内容符合index.html输入的角色信息；
			一，跳转过程中，将character_id一起发送过去
			二，script中，所有function需要输入值(角色id)，用于发送给后台app.py；IOData.py中的函数，需要输入值(角色id),返回值为该角色的数据；
			三，左上角色信息图片链接，从数据库获取角色id和角色名称，更改链接；
		4，服务器生产模式部署；
		5，index.html页面按下按钮后，跳出loading画面，阻止再次提交；
			出了loading画面之后，等待request返回值，则开始跳转；

2022年5月10日：
	已完成：
		1， index.html页面按下按钮，跳出loading画面(在test.py完成，需要更改gif尺寸和位置，并转移到index.html)；
	待完成：
		1，main.html 左上角色信息栏实时切换：
			已完成.3代码已经实现，需要复制到主程序上；
		2，每天0点清空数据库：
			实现方法：新的python.app，character_id != 0 ==> 清除该行数据；每天0点调用一次该app(生产模式部署教程有方法)；
		3，跳转到main.html时，页面内容符合index.html输入的角色信息；
			一，跳转过程中，将character_id一起发送过去
			二，script中，所有function需要输入值(角色id)，用于发送给后台app.py；IOData.py中的函数，需要输入值(角色id),返回值为该角色的数据；
			三，左上角色信息图片链接，从数据库获取角色id和角色名称，更改链接；
		4，服务器生产模式部署；

2022年5月11日：
		已完成：
			1，服务器生产模式部署；
		待完成：
			1，main.html 左上角色信息栏实时切换：
					已完成.3代码已经实现，需要复制到主程序上；
			2，每天0点清空数据库：
					实现方法：新的python.app，character_id != 0 ==> 清除该行数据；每天0点调用一次该app(生产模式部署教程有方法)；
			3，跳转到main.html时，页面内容符合index.html输入的角色信息；
					一，跳转过程中，将character_id一起发送过去
					二，script中，所有function需要输入值(角色id)，用于发送给后台app.py；IOData.py中的函数，需要输入值(角色id),返回值为该角色的数据；
					三，左上角色信息图片链接，从数据库获取角色id和角色名称，更改链接；

2022年5月12日：
	已完成：
		1，main.html 左上角色信息栏实时切换
		2，搜索界面添加快速查询按钮
	待完成：
		1，每天0点清空数据库：
				实现方法：新的python.app，character_id != 0 ==> 清除该行数据；每天0点调用一次该app(生产模式部署教程有方法)；
		2，跳转到main.html时，页面内容符合index.html输入的角色信息；
				一，跳转过程中，将character_id一起发送过去
				二，script中，所有function需要输入值(角色id)，用于发送给后台app.py；IOData.py中的函数，需要输入值(角色id),返回值为该角色的数据；
				三，左上角色信息图片链接，从数据库获取角色id和角色名称，更改链接；
		3， 重新部署服务器测试模式和生产模式

2022年5月13日：
	已完成：
		1，跳转到main.html时，页面内容符合index.html输入的角色信息；
				一，跳转过程中，将character_id一起发送过去
				二，script中，所有function需要输入值(角色id)，用于发送给后台app.py；IOData.py中的函数，需要输入值(角色id),返回值为该角色的数据；
				三，左上角色信息图片链接，从数据库获取角色id和角色名称，更改链接；
		2，生产模式重新部署完毕
		3, 爬虫改造，多线程爬取，加速完成爬取
	带完成：
		1， 每天0点清空数据库：
				实现方法：新的python.app，character_id != 0 ==> 清除该行数据；每天0点调用一次该app(生产模式部署教程有方法)；